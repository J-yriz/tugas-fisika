{"ast":null,"code":"import { CosValues, SinValues } from \"../utility/Type\";\nconst menghitungAkhirMendatar = (kecepatanAwal, sudut) => {\n  const massaBola = 0.5; // kg\n  const gravitasi = 9.8; // m/s^2\n  const resistansiUdara = Number((Math.random() * (10 - 5) + 5).toFixed(3)); // m/s^2\n\n  // Validasi input\n  if (kecepatanAwal < 0 || kecepatanAwal > 55) return \"Tolong Input Kecepatan 0-55\";\n  if (sudut < 0 || sudut > 45) return \"Tolong Input Sudut 0-45\";\n\n  // Ambil nilai cos dari enum\n  const cosValue = CosValues[`COS_${sudut}`];\n  if (cosValue === undefined) return \"Nilai sudut tidak valid\";\n\n  // Perhitungan\n  const Vox = kecepatanAwal * cosValue; // Kecepatan mendatar awal\n  const gayaNormal = massaBola * gravitasi; // Gaya normal\n  const koefisienGesekan = 0.3 * gayaNormal; // Koefisien gesekan rata-rata\n  const percepatanGesekan = koefisienGesekan / massaBola; // Percepatan akibat gesekan\n  const totalPercepatan = percepatanGesekan + resistansiUdara; // Total percepatan\n  if (totalPercepatan <= 0) return \"Total percepatan tidak valid\"; // Pastikan percepatan masuk akal\n\n  const t_darat = Vox / totalPercepatan; // Waktu total mendatar\n  const posisiAkhirX = Vox * t_darat - 0.5 * totalPercepatan * Math.pow(t_darat, 2); // Posisi mendatar akhir\n\n  return posisiAkhirX >= 0 ? posisiAkhirX.toFixed(3) : 0; // Jika negatif, posisi diatur ke 0\n};\nconst menghitungAkhirVerHori = (kecepatanAwal, sudut) => {\n  const gravitasi = 9.8; // m/s^2\n  const posisiAwalY = 0; // m\n  const posisiAwalX = 0; // m\n\n  // Validasi input\n  if (kecepatanAwal < 0 || kecepatanAwal > 55) return \"Tolong Input Kecepatan 0-55\";\n  if (sudut < 0 || sudut > 45) return \"Tolong Input Sudut 0-45\";\n\n  // Ambil nilai sin dan cos dari enum\n  const sinValue = SinValues[`SIN_${sudut}`];\n  const cosValue = CosValues[`COS_${sudut}`];\n  if (sinValue === undefined || cosValue === undefined) return \"Nilai sudut tidak valid\";\n\n  // Perhitungan\n  const Voy = kecepatanAwal * sinValue; // Kecepatan vertikal awal\n  const Vox = kecepatanAwal * cosValue; // Kecepatan horizontal awal\n  const totalPercepatanMendatar = Number((Math.random() * (10 - 5) + 5).toFixed(3)); // Resistansi udara acak\n  const totalPercepatanVertikal = gravitasi; // Percepatan vertikal akibat gravitasi\n\n  const t_udara = 2 * Voy / gravitasi; // Waktu total di udara\n  const posisiAkhirX = posisiAwalX + Vox * t_udara - 0.5 * totalPercepatanMendatar * Math.pow(t_udara, 2); // Posisi horizontal akhir\n  const posisiAkhirY = posisiAwalY; // Posisi vertikal akhir tetap sama karena kembali ke tanah\n  const titikTertinggi = posisiAwalY + Voy * (0.5 * t_udara) - 0.5 * totalPercepatanVertikal * Math.pow(0.5 * t_udara, 2); // Titik tertinggi\n\n  return {\n    posisiAkhirX,\n    posisiAkhirY,\n    titikTertinggi\n  };\n};\nexport { menghitungAkhirMendatar, menghitungAkhirVerHori };","map":{"version":3,"names":["CosValues","SinValues","menghitungAkhirMendatar","kecepatanAwal","sudut","massaBola","gravitasi","resistansiUdara","Number","Math","random","toFixed","cosValue","undefined","Vox","gayaNormal","koefisienGesekan","percepatanGesekan","totalPercepatan","t_darat","posisiAkhirX","pow","menghitungAkhirVerHori","posisiAwalY","posisiAwalX","sinValue","Voy","totalPercepatanMendatar","totalPercepatanVertikal","t_udara","posisiAkhirY","titikTertinggi"],"sources":["C:/DATA/Non-Gaming/Kuliah Udinus/tugas-fisika/src/utility/Function.ts"],"sourcesContent":["import { CosValues, SinValues } from \"../utility/Type\";\r\n\r\nconst menghitungAkhirMendatar = (kecepatanAwal: number, sudut: number) => {\r\n  const massaBola = 0.5; // kg\r\n  const gravitasi = 9.8; // m/s^2\r\n  const resistansiUdara = Number((Math.random() * (10 - 5) + 5).toFixed(3)); // m/s^2\r\n\r\n  // Validasi input\r\n  if (kecepatanAwal < 0 || kecepatanAwal > 55) return \"Tolong Input Kecepatan 0-55\";\r\n  if (sudut < 0 || sudut > 45) return \"Tolong Input Sudut 0-45\";\r\n\r\n  // Ambil nilai cos dari enum\r\n  const cosValue = CosValues[`COS_${sudut}` as keyof typeof CosValues];\r\n  if (cosValue === undefined) return \"Nilai sudut tidak valid\";\r\n\r\n  // Perhitungan\r\n  const Vox = kecepatanAwal * cosValue; // Kecepatan mendatar awal\r\n  const gayaNormal = massaBola * gravitasi; // Gaya normal\r\n  const koefisienGesekan = 0.3 * gayaNormal; // Koefisien gesekan rata-rata\r\n  const percepatanGesekan = koefisienGesekan / massaBola; // Percepatan akibat gesekan\r\n  const totalPercepatan = percepatanGesekan + resistansiUdara; // Total percepatan\r\n  if (totalPercepatan <= 0) return \"Total percepatan tidak valid\"; // Pastikan percepatan masuk akal\r\n\r\n  const t_darat = Vox / totalPercepatan; // Waktu total mendatar\r\n  const posisiAkhirX = Vox * t_darat - 0.5 * totalPercepatan * Math.pow(t_darat, 2); // Posisi mendatar akhir\r\n\r\n  return posisiAkhirX >= 0 ? posisiAkhirX.toFixed(3) : 0; // Jika negatif, posisi diatur ke 0\r\n};\r\n\r\nconst menghitungAkhirVerHori = (kecepatanAwal: number, sudut: number) => {\r\n  const gravitasi = 9.8; // m/s^2\r\n  const posisiAwalY = 0; // m\r\n  const posisiAwalX = 0; // m\r\n\r\n  // Validasi input\r\n  if (kecepatanAwal < 0 || kecepatanAwal > 55) return \"Tolong Input Kecepatan 0-55\";\r\n  if (sudut < 0 || sudut > 45) return \"Tolong Input Sudut 0-45\";\r\n\r\n  // Ambil nilai sin dan cos dari enum\r\n  const sinValue = SinValues[`SIN_${sudut}` as keyof typeof SinValues];\r\n  const cosValue = CosValues[`COS_${sudut}` as keyof typeof CosValues];\r\n\r\n  if (sinValue === undefined || cosValue === undefined) return \"Nilai sudut tidak valid\";\r\n\r\n  // Perhitungan\r\n  const Voy = kecepatanAwal * sinValue; // Kecepatan vertikal awal\r\n  const Vox = kecepatanAwal * cosValue; // Kecepatan horizontal awal\r\n  const totalPercepatanMendatar = Number((Math.random() * (10 - 5) + 5).toFixed(3)); // Resistansi udara acak\r\n  const totalPercepatanVertikal = gravitasi; // Percepatan vertikal akibat gravitasi\r\n\r\n  const t_udara = (2 * Voy) / gravitasi; // Waktu total di udara\r\n  const posisiAkhirX = posisiAwalX + Vox * t_udara - 0.5 * totalPercepatanMendatar * Math.pow(t_udara, 2); // Posisi horizontal akhir\r\n  const posisiAkhirY = posisiAwalY; // Posisi vertikal akhir tetap sama karena kembali ke tanah\r\n  const titikTertinggi = posisiAwalY + Voy * (0.5 * t_udara) - 0.5 * totalPercepatanVertikal * Math.pow(0.5 * t_udara, 2); // Titik tertinggi\r\n\r\n  return { posisiAkhirX, posisiAkhirY, titikTertinggi };\r\n};\r\n\r\nexport { menghitungAkhirMendatar, menghitungAkhirVerHori };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}